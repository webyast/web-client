<%
  write_disabled = ! @permissions[:write]
  static_disabled = write_disabled || @conf_mode != "static"
%>
<% content_for :head do %>
   <%= javascript_include_tag :defaults %>
   <%= javascript_include_tag "jquery.example.js" %>

   <% javascript_tag do %>
      $('#ip').example('Address of this machine (e.g. 192.168.0.18)');
      $('#netmask').example('Address shared with other machines (e.g. 255.255.255.0)');
      $('#name').example('Name of this machine in the network (e.g. mycomputer)');
      $('#domain').example('Network name (e.g. example.com)');
      $('#nameservers').example('IP address of machine which translates hostnames in IP addresses');
      $('#searchdomains').example('Domain name where hostname searching starts ');
      $('#default_route').example('Target address for outgoing IP data packages');
   <% end %>
   <% javascript_tag do -%>
      function focus_field(field_id) {
        $(".accordion").accordion('activate',$("#"+field_id).parent().parent().prev());
        $("#"+field_id).focus();
      };
   <% end %>

   <% javascript_tag do -%>
      function disable_static_config(abool) {
          $("#ip")[0].disabled = abool;
          $("#netmask")[0].disabled = abool;
          $("#name")[0].disabled = abool;
          $("#domain")[0].disabled = abool;
          $("#nameservers")[0].disabled = abool;
          $("#searchdomains")[0].disabled = abool;
          $("#default_route")[0].disabled = abool;
// TODO fix and use this
//          $.each(["#ip", "#netmask",
//                  "#nameservers", "#searchdomains",
//                  "#default_route"], function() {
//              $(this)[0].disabled = abool;
//          });
      }

   <% end -%>
   <% javascript_tag do -%>
   //TODO move this validations to separate js library
      function validIP(ip) {
        //use [0-9] to avoid negative values and it is also better prepared to IP6
        if (!ip.match(/^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/))
          return false;

        ipArray = ip.split(/\./);
        for (i=0;i<4;++i){
          if (ipArray[i]>255)
            return false;
        }
        return true;
      }

      function validPrefix(prefix) {
        if (!prefix.match(/^\/[0-9]{1,2}$/))
          return false;

        if (prefix.substr(1)>32)
          return false;

        return true;
      }
      function validNameservers(nameservers){
        if (nameservers.match(/^\s*$/))
            return false;
        return true; //FIXME better check
      }
      function validHostname(hostname){
        //not empty
        if (hostname.match(/^\s*$/))
            return false;
        return true; //FIXME better check
      }

      //RFC 952 [a-zA-Z0-9'-']
      //cann't have any spaces
      //cann't start with a hyphen '-'
      //cann't start with a digit
      //no periodic hyphen '-'
      //must not end with a hyphen '-'

      //vgorobets@suse.de TODO:
      //upgrade to RFC1123

      var valChar = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-0123456789";
      var counter = 0;

      function hostValidation(t,v){
          var valhostname = "";
          for (i=0; i < t.value.length; i++) {
          x = t.value.charAt(i);
             if (v.indexOf(x,0) != -1 && t.value !='-' && isNaN(t.value)) {
                if(t.value[t.value.length-1] == t.value[t.value.length-2] && t.value[t.value.length-1] == "-") {
						t.value = t.value.substring(0,t.value.length-1);
                  addWarning("periodic");
                }
                valhostname += x;
              } else {
                addWarning(x); // put warning if character is invalid
              }
          }
          t.value = valhostname;
      }

      function clearWarning(){
         var replace_length = document.getElementById("warning").firstChild.nodeValue.length;
         document.getElementById("warning").firstChild.replaceData(0, replace_length, ""); // 0 == at string beginning
      }

      function addWarning(message){
         if(message == " ") {
            message += "<%= _("whitespace - invalid character.") %>"
         } else if (isNaN(message) == false) {
            message += "<%= _(" - can not start with a digit.") %>"
         } else if (message == "periodic") { 
            message = "<%= _("periodic '-' is not allowed.") %>"
         } else if (message == "endWithHyphen") { 
				message = "<%= _("can not end with (-) hyphen.") %>"
         } else {
            if(message == '-') {
               message = "<%= _("can not start with (-) hyphen.") %>"
            } else {
               message += "<%= _(" - is invalid character for hostname.") %>"
            }
         }
         var replace_length = document.getElementById("warning").firstChild.nodeValue.length;
         document.getElementById("warning").firstChild.replaceData(0, replace_length, message); // 0 == at string beginning
      }

      function endWithHyphen(t) {
         if(t.value[t.value.length-1] == "-") {
            t.value = t.value.substring(0,t.value.length-1);
            focus_field("name");
            addWarning("endWithHyphen");
			}        
      }

      function validDomain(domain){
        //not empty, suse doesn't support it
        if (domain.match(/^\s*$/))
            return false;
        return true; //FIXME better check
      }

      function validateNetwork() {
        if ($("#conf_mode")[0].value == "static") {
          if (! validIP($("#ip")[0].value)) {
            say_bad_ip = "<%= _("Invalid IP address format. The correct one is nnn.nnn.nnn.nnn for nnn between 0 and 255.") %>"
      	    focus_field("ip");
            alert (say_bad_ip);
            return false;
          }
          netmask = $("#netmask")[0].value;
          //support only prefix as it is not confusing with label
          if (!validPrefix(netmask)) {
      	    focus_field("netmask");
            say_bad_mask = "<%= _("Invalid Prefix format. The correct one /nn where nn is between 0-32 (CIDR format).") %>"
            alert (say_bad_mask);
            return false;
          }
          if (! validIP($("#default_route")[0].value)) {
      	    focus_field("default_route");
            say_bad_route = "<%= _("Invalid default route format. The correct one is nnn.nnn.nnn.nnn for nnn between 0 and 255.") %>"
            alert (say_bad_route);
            return false;
          }
          if (!validNameservers($("#nameservers")[0].value)){
      	    focus_field("nameservers");
            say_bad_ns = "<%= _("Name servers are required. There must be at least one specified.") %>"
            alert (say_bad_ns);
            return false;
          }
          if (!validHostname($("#name")[0].value)){
      	    focus_field("name");
            say_bad_hostname = "<%= _("Hostname is required. It must be specified.") %>"
            alert (say_bad_hostname);
            return false;
          }
          if (!validDomain($("#domain")[0].value)){
      	    focus_field("domain");
            say_bad_domain = "<%= _("Domain is required. An empty domain is not supported.") %>"
            alert (say_bad_domain);
            return false;
          }
        }
        $('#progress').show();
        return true;

      };
    <% end %>
<% end %>
<% content_for :before_script do %>
  <% javascript_tag do %>
    $(document).ready(function(){
      $(".accordion").accordion({
        navigation : true,
        header     : 'fieldset legend'
      });
    });
  <% end %>
<% end %>
<div class='plugin-icon'><img src='/icons/yast-network.png' alt=''/><%=_("Network")%></div>
<div class='plugin-content grid_12'>

<% form_tag("/network", :method => "get") do %>
  <!-- (collection, value, text, selected) -->


<!--  temporally disabled - 2009-10-26 rlihm
  <fieldset id="interface_set" class="">
    <legend><%= _("Interface")%></legend>
    <p>
      <%= select_tag(:interface, options_from_collection_for_select(@ifcs, :id, :id, @iface)) %>
    </p>
    <p>
      <%= submit_tag(_("Select"), :class => "button") %>
    </p>
  </fieldset>
   -->

<% end %>


<% form_for :network, @network, :url => { :action => "update" }, :html => { :method => :put, :onsubmit => "return validateNetwork();"} do |n| %>
<%= n.error_messages %>
<!-- ~/svn/web-client/plugins/systemtime/app/views/systemtime/index.rhtml -->
  
  <input type="hidden" id="interface" name="interface" value="<%= @iface %>"/>
  
  <fieldset id="general-settings" class="wrapper with-background no-min-height">
    <legend>General settings</legend>
    <p>
      <label for="<%= :conf_mode %>"><%=_("Configuration mode")%></label>
      <%= select_tag(:conf_mode, options_for_select(@conf_modes, @conf_mode), :disabled => write_disabled)%>
    </p>
  </fieldset>
  <div class="accordion">
    <fieldset id="ip-address" class="wrapper with-background">
      <legend>IP Address</legend>
      <div>
        <p>
          <label for="<%= :ip %>"><%=_("IP address")%></label>
          <%=text_field_tag :ip, @ip, :disabled => static_disabled %>
        </p>
        <p>
          <label for="<%= :netmask %>"><%=_("Subnet mask / Prefixlen")%></label>
          <%=text_field_tag :netmask, @netmask, :disabled => static_disabled %>
        </p>
      </div>
    </fieldset>
    <fieldset id="dns" class="wrapper with-background">
      <legend>DNS</legend>
      <div>
        <p>
          <label for="<%= :name %>"><%=_("Hostname")%></label>
          <%=text_field_tag(:name, @name, :onblur=>"endWithHyphen(this)", :onkeyup=>"hostValidation(this,valChar);", :onkeydown=>"clearWarning();", :disabled => static_disabled) %>
          <span id="warning" style="font-weight:bold; margin-left:20px; color:#c00000">&nbsp;</span>
        </p>
        <p>
          <label for="<%= :domain %>"><%=_("Domain")%></label>
          <%=text_field_tag :domain, @domain, :disabled => static_disabled %>
        </p>
        <p>
          <label for="<%= :nameservers %>"><%=_("Name servers")%></label>
          <%=text_field_tag :nameservers, @nameservers.join(" "), :disabled => static_disabled %>
        </p>
        <p>
          <label for="<%= :searchdomains %>"><%=_("Search domains")%></label>
          <%=text_field_tag :searchdomains, @searchdomains.join(" "), :disabled => static_disabled %>
        </p>
      </div>
    </fieldset>
  
    <fieldset id="routing" class="wrapper with-background">
      <legend>Routing</legend>
      <div>
        <p>
          <label for="<%= :default_route %>"><%=_("Default route")%></label>
          <%=text_field_tag :default_route, @default_route, :disabled => static_disabled %>
        </p>
      </div>
    </fieldset>
  </div>
  <fieldset>
    <%= form_send_buttons :disabled => write_disabled %>
  </fieldset>
<% end %>
</div>

<% javascript_tag do -%>
   $('#conf_mode').delayedObserver(0.25, function(element, value) {
     disabled = <%= write_disabled %> || value != "static";
     disable_static_config(disabled);
   })
<% end -%>
